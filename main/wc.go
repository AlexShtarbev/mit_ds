package main

import (
	"fmt"
	"github.com/AlexShtarbev/mit_ds/mapreduce"
	"os"
	"unicode"
	"strings"
	"strconv"
	"log"
)

var kv map[string]int
func Print(kv map[string]int) {
	//FIXME
	fileName := "output.txt"

	output, err := os.Create(fileName)
	if(err != nil) {
		log.Fatal("could not create file : %s", fileName)
	}
	defer output.Close()

	for key, val := range kv {
		output.WriteString(key + ": " + strconv.Itoa(val) + "\n")
	}
}

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	splitFunc := func(c rune) bool {
		return !unicode.IsLetter(c)
	}

	words := strings.FieldsFunc(value, splitFunc)

	for _, word := range words {
		//output.WriteString(word + "\n")
		res = append(res, mapreduce.KeyValue{word, strconv.Itoa(1)})

		//// FIXME
		//if _, ok := kv[word]; !ok {
		//	kv[word] = 1
		//} else {
		//	kv[word]++
		//}
	}

	return res
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	var sum int = 0
	for _, val := range values {
		i, err := strconv.Atoi(val)
		if err != nil {
			log.Fatal("error converting value" + val + "to integer\n")
		}
		sum += i
	}

	// FIXME
	kv[key] = sum

	return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	//FIXME
	kv = make(map[string]int)

	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}

	Print(kv)
}
